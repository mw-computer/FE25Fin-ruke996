/* jquery.scrollbar.js */
!function (l, r) { "function" == typeof define && define.amd ? define(["jquery"], r) : r(l.jQuery, l, l.document) }(this, function (l, r, o) { "use strict"; void 0 !== r && void 0 !== o || (r = window, o = r.document); var s = "px", e = { data: {}, macosx: -1 !== r.navigator.platform.toLowerCase().indexOf("mac"), mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(r.navigator.userAgent), overlay: null, scroll: null, scrolls: [], webkit: /WebKit/.test(r.navigator.userAgent), log: function () { } }, t = { autoScrollSize: !0, autoUpdate: !0, debug: !1, disableBodyScroll: !1, duration: 200, ignoreMobile: !0, ignoreOverlay: !0, scrollStep: 30, showArrows: !1, stepScrolling: !0, type: "simple", scrollx: null, scrolly: null, onDestroy: null, onInit: null, onScroll: null, onUpdate: null }, i = function (o, s) { var i; e.scroll || (e.log("Init jQuery Scrollbar v0.2.6"), e.overlay = !((i = d(!0)).height || i.width), e.scroll = d(), n(), l(r).resize(function () { var l = !1; if (e.scroll && (e.scroll.height || e.scroll.width)) { var r = d(); r.height == e.scroll.height && r.width == e.scroll.width || (e.scroll = r, l = !0) } n(l) })), this.container = o, this.options = l.extend({}, t, r.jQueryScrollbarOptions || {}), this.scrollTo = null, this.scrollx = {}, this.scrolly = {}, this.init(s) }; i.prototype = { destroy: function () { if (this.wrapper) { var r = this.container.scrollLeft(), s = this.container.scrollTop(); this.container.insertBefore(this.wrapper).css({ height: "", margin: "" }).removeClass("scroll-content").removeClass("scroll-scrollx_visible").removeClass("scroll-scrolly_visible").off(".scrollbar").scrollLeft(r).scrollTop(s), this.scrollx.scrollbar.removeClass("scroll-scrollx_visible").find("div").andSelf().off(".scrollbar"), this.scrolly.scrollbar.removeClass("scroll-scrolly_visible").find("div").andSelf().off(".scrollbar"), this.wrapper.remove(), l(o).add("body").off(".scrollbar"), l.isFunction(this.options.onDestroy) && this.options.onDestroy.apply(this, [this.container]) } }, getScrollbar: function (r) { var o = this.options["scroll" + r], s = { advanced: '<div class="scroll-element_corner"></div><div class="scroll-arrow scroll-arrow_less"></div><div class="scroll-arrow scroll-arrow_more"></div><div class="scroll-element_outer">    <div class="scroll-element_size"></div>    <div class="scroll-element_inner-wrapper">        <div class="scroll-element_inner scroll-element_track">            <div class="scroll-element_inner-bottom"></div>        </div>    </div>    <div class="scroll-bar">        <div class="scroll-bar_body">            <div class="scroll-bar_body-inner"></div>        </div>        <div class="scroll-bar_bottom"></div>        <div class="scroll-bar_center"></div>    </div></div>', simple: '<div class="scroll-element_outer">    <div class="scroll-element_size"></div>    <div class="scroll-element_track"></div>    <div class="scroll-bar"></div></div>' }, e = s[this.options.type] ? this.options.type : "advanced"; return o = o ? "string" == typeof o ? l(o).appendTo(this.wrapper) : l(o) : l("<div>").addClass("scroll-element").html(s[e]).appendTo(this.wrapper), this.options.showArrows && o.addClass("scroll-element_arrows_visible"), o.addClass("scroll-" + r) }, init: function (r) { var t = this, i = this.container, c = this.containerWrapper || i, a = l.extend(this.options, r || {}), n = { x: this.scrollx, y: this.scrolly }, d = this.wrapper, p = { scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop() }; if (d) c.css({ height: "", "margin-bottom": -1 * e.scroll.height + s, "margin-right": -1 * e.scroll.width + s }); else { if (this.wrapper = d = l("<div>").addClass("scroll-wrapper").addClass(i.attr("class")).css("position", "absolute" == i.css("position") ? "absolute" : "relative").insertBefore(i).append(i), i.is("textarea") && (this.containerWrapper = c = l("<div>").insertBefore(i).append(i), d.addClass("scroll-textarea")), c.addClass("scroll-content").css({ height: "", "margin-bottom": -1 * e.scroll.height + s, "margin-right": -1 * e.scroll.width + s }), i.on("scroll.scrollbar", function (r) { l.isFunction(a.onScroll) && a.onScroll.call(t, { maxScroll: n.y.maxScrollOffset, scroll: i.scrollTop(), size: n.y.size, visible: n.y.visible }, { maxScroll: n.x.maxScrollOffset, scroll: i.scrollLeft(), size: n.x.size, visible: n.x.visible }), n.x.isVisible && n.x.scroller.css("left", i.scrollLeft() * n.x.kx + s), n.y.isVisible && n.y.scroller.css("top", i.scrollTop() * n.y.kx + s) }), d.on("scroll", function () { d.scrollTop(0).scrollLeft(0) }), a.disableBodyScroll) { var h = function (l) { u(l) ? n.y.isVisible && n.y.mousewheel(l) : n.x.isVisible && n.x.mousewheel(l) }; d.on({ "MozMousePixelScroll.scrollbar": h, "mousewheel.scrollbar": h }), e.mobile && d.on("touchstart.scrollbar", function (r) { var s = r.originalEvent.touches && r.originalEvent.touches[0] || r, e = s.pageX, t = s.pageY, c = i.scrollLeft(), a = i.scrollTop(); l(o).on({ "touchmove.scrollbar": function (l) { var r = l.originalEvent.targetTouches && l.originalEvent.targetTouches[0] || l; i.scrollLeft(c + e - r.pageX), i.scrollTop(a + t - r.pageY), l.preventDefault() }, "touchend.scrollbar": function () { l(o).off(".scrollbar") } }) }) } l.isFunction(a.onInit) && a.onInit.apply(this, [i]) } l.each(n, function (r, s) { var e = null, c = 1, d = "x" == r ? "scrollLeft" : "scrollTop", p = a.scrollStep, h = function () { var l = i[d](); i[d](l + p), 1 == c && l + p >= v && (l = i[d]()), -1 == c && l + p <= v && (l = i[d]()), i[d]() == l && e && e() }, v = 0; s.scrollbar || (s.scrollbar = t.getScrollbar(r), s.scroller = s.scrollbar.find(".scroll-bar"), s.mousewheel = function (l) { if (!s.isVisible || "x" == r && u(l)) return !0; if ("y" == r && !u(l)) return n.x.mousewheel(l), !0; var o = -1 * l.originalEvent.wheelDelta || l.originalEvent.detail, e = s.size - s.visible - s.offset; return v <= 0 && o < 0 || v >= e && o > 0 || ((v += o) < 0 && (v = 0), v > e && (v = e), t.scrollTo = t.scrollTo || {}, t.scrollTo[d] = v, setTimeout(function () { t.scrollTo && (i.stop().animate(t.scrollTo, 240, "linear", function () { v = i[d]() }), t.scrollTo = null) }, 1)), l.preventDefault(), !1 }, s.scrollbar.on({ "MozMousePixelScroll.scrollbar": s.mousewheel, "mousewheel.scrollbar": s.mousewheel, "mouseenter.scrollbar": function () { v = i[d]() } }), s.scrollbar.find(".scroll-arrow, .scroll-element_track").on("mousedown.scrollbar", function (o) { if (1 != o.which) return !0; c = 1; var n = { eventOffset: o["x" == r ? "pageX" : "pageY"], maxScrollValue: s.size - s.visible - s.offset, scrollbarOffset: s.scroller.offset()["x" == r ? "left" : "top"], scrollbarSize: s.scroller["x" == r ? "outerWidth" : "outerHeight"]() }, u = 0, b = 0; return l(this).hasClass("scroll-arrow") ? (c = l(this).hasClass("scroll-arrow_more") ? 1 : -1, p = a.scrollStep * c, v = c > 0 ? n.maxScrollValue : 0) : (c = n.eventOffset > n.scrollbarOffset + n.scrollbarSize ? 1 : n.eventOffset < n.scrollbarOffset ? -1 : 0, p = Math.round(.75 * s.visible) * c, v = n.eventOffset - n.scrollbarOffset - (a.stepScrolling ? 1 == c ? n.scrollbarSize : 0 : Math.round(n.scrollbarSize / 2)), v = i[d]() + v / s.kx), t.scrollTo = t.scrollTo || {}, t.scrollTo[d] = a.stepScrolling ? i[d]() + p : v, a.stepScrolling && (e = function () { v = i[d](), clearInterval(b), clearTimeout(u), u = 0, b = 0 }, u = setTimeout(function () { b = setInterval(h, 40) }, a.duration + 100)), setTimeout(function () { t.scrollTo && (i.animate(t.scrollTo, a.duration), t.scrollTo = null) }, 1), f(e, o) }), s.scroller.on("mousedown.scrollbar", function (e) { if (1 != e.which) return !0; var t = e["x" == r ? "pageX" : "pageY"], c = i[d](); return s.scrollbar.addClass("scroll-draggable"), l(o).on("mousemove.scrollbar", function (l) { var o = parseInt((l["x" == r ? "pageX" : "pageY"] - t) / s.kx, 10); i[d](c + o) }), f(function () { s.scrollbar.removeClass("scroll-draggable"), v = i[d]() }, e) })) }), l.each(n, function (l, r) { var o = "scroll-scroll" + l + "_visible", s = "x" == l ? n.y : n.x; r.scrollbar.removeClass(o), s.scrollbar.removeClass(o), c.removeClass(o) }), l.each(n, function (r, o) { l.extend(o, "x" == r ? { offset: parseInt(i.css("left"), 10) || 0, size: i.prop("scrollWidth"), visible: d.width() } : { offset: parseInt(i.css("top"), 10) || 0, size: i.prop("scrollHeight"), visible: d.height() }) }); var v = function (r, o) { var t = "scroll-scroll" + r + "_visible", a = "x" == r ? n.y : n.x, f = parseInt(i.css("x" == r ? "left" : "top"), 10) || 0, u = o.size, p = o.visible + f; o.isVisible = u - p > 1, o.isVisible ? (o.scrollbar.addClass(t), a.scrollbar.addClass(t), c.addClass(t)) : (o.scrollbar.removeClass(t), a.scrollbar.removeClass(t), c.removeClass(t)), "y" == r && (o.isVisible || o.size < o.visible) && c.css("height", p + e.scroll.height + s), n.x.size == i.prop("scrollWidth") && n.y.size == i.prop("scrollHeight") && n.x.visible == d.width() && n.y.visible == d.height() && n.x.offset == (parseInt(i.css("left"), 10) || 0) && n.y.offset == (parseInt(i.css("top"), 10) || 0) || (l.each(n, function (r, o) { l.extend(o, "x" == r ? { offset: parseInt(i.css("left"), 10) || 0, size: i.prop("scrollWidth"), visible: d.width() } : { offset: parseInt(i.css("top"), 10) || 0, size: i.prop("scrollHeight"), visible: d.height() }) }), v("x" == r ? "y" : "x", a)) }; l.each(n, v), l.isFunction(a.onUpdate) && a.onUpdate.apply(this, [i]), l.each(n, function (l, r) { var o = "x" == l ? "left" : "top", e = "x" == l ? "outerWidth" : "outerHeight", t = "x" == l ? "width" : "height", c = parseInt(i.css(o), 10) || 0, n = r.size, d = r.visible + c, f = r.scrollbar.find(".scroll-element_size"); f = f[e]() + (parseInt(f.css(o), 10) || 0), a.autoScrollSize && (r.scrollbarSize = parseInt(f * d / n, 10), r.scroller.css(t, r.scrollbarSize + s)), r.scrollbarSize = r.scroller[e](), r.kx = (f - r.scrollbarSize) / (n - d) || 1, r.maxScrollOffset = n - d }), i.scrollLeft(p.scrollLeft).scrollTop(p.scrollTop).trigger("scroll") } }, l.fn.scrollbar = function (r, o) { var s = this; return "get" === r && (s = null), this.each(function () { var t = l(this); if (t.hasClass("scroll-wrapper") || "body" == t.get(0).nodeName) return !0; var c = t.data("scrollbar"); if (c) { if ("get" === r) return s = c, !1; if (c["string" == typeof r && c[r] ? r : "init"].apply(c, l.isArray(o) ? o : []), "destroy" === r) for (t.removeData("scrollbar"); l.inArray(c, e.scrolls) >= 0;)e.scrolls.splice(l.inArray(c, e.scrolls), 1) } else "string" != typeof r && (c = new i(t, r), t.data("scrollbar", c), e.scrolls.push(c)); return !0 }), s }, l.fn.scrollbar.options = t; var c, a, n = (c = 0, function (l) { var r, o, s, t, i, a, d; for (r = 0; r < e.scrolls.length; r++)o = (t = e.scrolls[r]).container, s = t.options, i = t.wrapper, a = t.scrollx, d = t.scrolly, (l || s.autoUpdate && i && i.is(":visible") && (o.prop("scrollWidth") != a.size || o.prop("scrollHeight") != d.size || i.width() != a.visible || i.height() != d.visible)) && t.init(); clearTimeout(c), c = setTimeout(n, 300) }); function d(r) { if (e.webkit && !r) return { height: 0, width: 0 }; if (!e.data.outer) { var o = { border: "none", "box-sizing": "content-box", height: "200px", margin: "0", padding: "0", width: "200px" }; e.data.inner = l("<div>").css(l.extend({}, o)), e.data.outer = l("<div>").css(l.extend({ left: "-1000px", overflow: "scroll", position: "absolute", top: "-1000px" }, o)).append(e.data.inner).appendTo("body") } return e.data.outer.scrollLeft(1e3).scrollTop(1e3), { height: Math.ceil(e.data.outer.offset().top - e.data.inner.offset().top || 0), width: Math.ceil(e.data.outer.offset().left - e.data.inner.offset().left || 0) } } function f(r, s) { return l(o).on({ "blur.scrollbar": function () { l(o).add("body").off(".scrollbar"), r && r() }, "dragstart.scrollbar": function (l) { return l.preventDefault(), !1 }, "mouseup.scrollbar": function () { l(o).add("body").off(".scrollbar"), r && r() } }), l("body").on({ "selectstart.scrollbar": function (l) { return l.preventDefault(), !1 } }), s && s.preventDefault(), !1 } function u(l) { var r = l.originalEvent; return (!r.axis || r.axis !== r.HORIZONTAL_AXIS) && !r.wheelDeltaX } r.angular && (a = r.angular).module("jQueryScrollbar", []).provider("jQueryScrollbar", function () { var l = t; return { setOptions: function (r) { a.extend(l, r) }, $get: function () { return { options: a.copy(l) } } } }).directive("jqueryScrollbar", function (l, r) { return { restrict: "AC", link: function (o, s, e) { var t = r(e.jqueryScrollbar)(o); s.scrollbar(t || l.options).on("$destroy", function () { s.scrollbar("destroy") }) } } }) });

$(function () {
	$('.scrollbar-inner').scrollbar({
		autoScrollSize: false,
	});
});
$(function () {
	$('.tab-link').on('click', function (e) {

		$($(this).closest('.board__typeA')).find('.tab, .tab__body, .dropdown-item').each(function () {
			$(this).removeClass("active");
			$(this).removeClass("open-dropdown");
		});
		$(this).parent().addClass("active");
		$($(this).closest('.board__typeA')).find($(this).attr("href")).each(function () {
			$(this).addClass("active");
		});
		e.preventDefault();
	});
	$('.tab-dropdown').on('click', function (e) {
		if ($(this).parent().hasClass("open-dropdown")) {
			$(this).parent().removeClass("open-dropdown");
		} else {
			$($(this).closest('.board__typeA')).find('.tab').each(function () {
				$(this).removeClass("open-dropdown");
			});
			$(this).parent().addClass("open-dropdown");
		}
		e.preventDefault();
	});
	$('.dropdown-item').on('click', function (e) {
		$($(this).closest('.board__typeA')).find('.tab, .tab__body, .dropdown-item').each(function () {
			$(this).removeClass("active");
			$(this).removeClass("open-dropdown");
		});
		$(this).addClass("active");
		$(this).closest('.tab').addClass("active");
		//$(this).closest('.tab-dropdown').text($(this).find('a').text());
		//alert($(this).find('a').text());
		$(this).parent().parent().find('.tab-dropdown').text($(this).find('a').text());
		$(this).find('.dropdown-link').each(function () {
			$($(this).closest('.board__typeA')).find($(this).attr("href")).each(function () {
				$(this).addClass("active");

			});


		});
		e.preventDefault();
	});



});
